#VRML V2.0 utf8
#===================================---
# VT Structure Visualisation Control
#-----------------------------------
# ActiveX Control for structure visualisation
# Copyright 2002 Vapour Technology Ltd.
#
# SlabElement.wrl
# 19/03/2002 - James Smith
#
# $Id: SlabElement.wrl,v 1.16 2002/03/31 17:31:10 vap-james Exp $

PROTO SlabElement [
   eventIn MFColor  set_colours
   eventIn MFInt32  set_cracks
   eventIn MFVec3f  set_nodes
   eventIn SFBool   set_visible
   field   MFColor  colours     [ 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1]
   field   MFInt32  cracks      [ 0 0 0 0 0 0 0 0 0 ]
   field   MFString description ["ID:" "Group:" "Temperature:"]
   field   MFVec3f  nodes       [ 0.5 0 0.5, -0.5 0 0.5, -0.5 0 -0.5, 0.5 0 -0.5, 0 0 0.5, -0.5 0 0, 0 0 -0.5, 0.5 0 0, 0 0 0]
   field   SFFloat  thickness   1
   eventOut MFString description_changed
]
{

   PROTO Crack [
      field SFVec3f size 0.1 0.2 0.1
      exposedField SFInt32 type 0
      exposedField SFVec3f translation 0 0 0
      exposedField SFFloat transparency 0
   ]
   {
      Transform {
         translation IS translation
         children [
            Switch {
               whichChoice IS type
               choice [
                  Group {}
                  Shape {
                     appearance Appearance {
                        material Material {
                           diffuseColor 1 1 0
                           transparency IS transparency
                        }
                     }
                     geometry DEF GEOM Box {
                        size IS size
                     }
                  }
                  Shape {
                     appearance Appearance {
                        material Material {
                           diffuseColor 1 0 0
                           transparency IS transparency
                        }
                     }
                     geometry USE GEOM
                  }
                  Shape {
                     appearance Appearance {
                        material Material {
                           diffuseColor 0 1 1
                           transparency IS transparency
                        }
                     }
                     geometry USE GEOM
                  }
               ]
            }
         ]
      }
   }

   Group {
      children [
         DEF SENSOR TouchSensor {}
         DEF SLAB Shape {
            appearance Appearance {
               material DEF SLABMATERIAL Material {
                  #transparency 0.5
                  diffuseColor 0.5 0.5 0.5
               }
            }
            geometry IndexedFaceSet {
               coord DEF COORDS Coordinate {}
               color DEF COLOURS Color {}
               ccw FALSE
               colorPerVertex TRUE
               solid TRUE
               coordIndex [
                  0 16 17 1 -1
                  16 4 5 17 -1
                  4 20 21 5 -1
                  20 8 9 21 -1
                  8 24 25 9 -1
                  24 12 13 25 -1
                  12 28 29 13 -1
                  28 0 1 29 -1
                  2 18 19 3 -1
                  18 6 7 19 -1
                  6 22 23 7 -1
                  22 10 11 23 -1
                  10 26 27 11 -1
                  26 14 15 27 -1
                  14 30 31 15 -1
                  30 2 3 31 -1
                  0 28 32 16 -1
                  16 32 20 4 -1
                  32 24 8 20 -1
                  28 12 24 32 -1
                  3 19 35 31 -1
                  19 7 23 35 -1
                  35 23 11 27 -1
                  31 35 27 15 -1
               ]
            }
         }
         DEF STEEL Shape {
            appearance Appearance {
               material DEF STEELMATERIAL Material {
                  shininess 1
                  diffuseColor 0.75 0.75 0.75
               }
            }
            geometry IndexedFaceSet {
               coord USE COORDS
               #color USE COLOURS
               #colorPerVertex TRUE
               ccw FALSE
               solid TRUE
               coordIndex [
                  1 17 18 2 -1
                  17 5 6 18 -1
                  5 21 22 6 -1
                  21 9 10 22 -1
                  9 25 26 10 -1
                  25 13 14 26 -1
                  13 29 30 14 -1
                  29 1 2 30 -1
               ]  
            }
         }
         Group {
            children [
               DEF CRACK1 Crack {}
               DEF CRACK2 Crack {}
               DEF CRACK3 Crack {}
               DEF CRACK4 Crack {}
               DEF CRACK5 Crack {}
               DEF CRACK6 Crack {}
               DEF CRACK7 Crack {}
               DEF CRACK8 Crack {}
               DEF CRACK9 Crack {}
            ]
         }
      ]
   }
   DEF SCRIPT Script {
      directOutput TRUE
      mustEvaluate TRUE
      eventIn MFColor set_colours IS set_colours
      eventIn MFInt32 set_cracks IS set_cracks
      eventIn MFVec3f set_nodes IS set_nodes
      eventIn SFBool  set_visible IS set_visible
      eventIn SFBool  set_mouseOver
      field MFColor colours IS colours
      field MFInt32 cracks IS cracks
      field MFString description IS description
      field SFFloat thickness IS thickness
      field MFVec3f nodes  IS nodes
      field MFVec3f points []
      field SFNode  coordNode USE COORDS
      field SFNode  colourNode USE COLOURS
      field SFNode  steelmaterial USE STEELMATERIAL
      field SFNode  slabmaterial USE SLABMATERIAL
      field SFNode  crack1 USE CRACK1
      field SFNode  crack2 USE CRACK2
      field SFNode  crack3 USE CRACK3
      field SFNode  crack4 USE CRACK4
      field SFNode  crack5 USE CRACK5
      field SFNode  crack6 USE CRACK6
      field SFNode  crack7 USE CRACK7
      field SFNode  crack8 USE CRACK8
      field SFNode  crack9 USE CRACK9
      eventOut MFString description_changed IS description_changed
      url "javascript:
         function initialize() {
            // Create points
            points[0]  = new SFVec3f(0,thickness,0);
            points[1]  = new SFVec3f(0,thickness/2 + thickness/20,0);
            points[2]  = new SFVec3f(0,thickness/2 - thickness/20,0);
            points[3]  = new SFVec3f(0,0,0);
            // Calculate initial node positions and colours
            update_nodes(nodes);
            update_colours(colours);
            update_cracks(cracks);
         }
         function set_colours(value,time) {
            update_colours(value);
         }
         function update_colours(colourset) {
            for (i=0; i<9; i++) {
               for (j=0; j<4; j++) {
                  colourNode.color[(i*4) + j] = colourset[i];
               }
            }
         }
         function set_nodes(value,time) {
            update_nodes(value);
         }
         function update_nodes(nodeset) {
            // Set node locations
            for (i=0; i<9; i++) {
               for (j=0; j<4; j++) {
                  coordNode.point[(i*4) + j] = nodeset[i].add(points[j]);
               }
            }
            // Set crack locations
            crack1.translation = coordNode.point[35].add(coordNode.point[3].subtract(coordNode.point[35]).multiply(0.666));
            crack2.translation = coordNode.point[35].add(coordNode.point[7].subtract(coordNode.point[35]).multiply(0.666));
            crack3.translation = coordNode.point[35].add(coordNode.point[11].subtract(coordNode.point[35]).multiply(0.666));
            crack4.translation = coordNode.point[35].add(coordNode.point[15].subtract(coordNode.point[35]).multiply(0.666));
            crack5.translation = coordNode.point[35].add(coordNode.point[19].subtract(coordNode.point[35]).multiply(0.666));
            crack6.translation = coordNode.point[35].add(coordNode.point[23].subtract(coordNode.point[35]).multiply(0.666));
            crack7.translation = coordNode.point[35].add(coordNode.point[27].subtract(coordNode.point[35]).multiply(0.666));
            crack8.translation = coordNode.point[35].add(coordNode.point[31].subtract(coordNode.point[35]).multiply(0.666));
            crack9.translation = coordNode.point[35].add(coordNode.point[35].subtract(coordNode.point[35]).multiply(0.666));
         }
         function set_cracks(value,time) {
            update_cracks(value);
         }
         function update_cracks(crack_types) {
            crack1.type = crack_types[0];
            crack2.type = crack_types[1];
            crack3.type = crack_types[2];
            crack4.type = crack_types[3];
            crack5.type = crack_types[4];
            crack6.type = crack_types[5];
            crack7.type = crack_types[6];
            crack8.type = crack_types[7];
            crack9.type = crack_types[8];
         }
         function set_visible(value,time) {
            if (value == true) {
               steelmaterial.transparency = 0;
               slabmaterial.transparency = 0;
               crack1.transparency = 0;
               crack2.transparency = 0;
               crack3.transparency = 0;
               crack4.transparency = 0;
               crack5.transparency = 0;
               crack6.transparency = 0;
               crack7.transparency = 0;
               crack8.transparency = 0;
               crack9.transparency = 0;
            }
            else {
               steelmaterial.transparency = 0.9;
               slabmaterial.transparency = 0.9;
               crack1.transparency = 1;
               crack2.transparency = 1;
               crack3.transparency = 1;
               crack4.transparency = 1;
               crack5.transparency = 1;
               crack6.transparency = 1;
               crack7.transparency = 1;
               crack8.transparency = 1;
               crack9.transparency = 1;
            }
         }
         function set_mouseOver(value,time) {
            if (value) {
               description_changed = description;
            }
            else {
               description_changed = new MFString();
            }
         }
      "
   }
   ROUTE SENSOR.isOver TO SCRIPT.set_mouseOver
}

SlabElement {}