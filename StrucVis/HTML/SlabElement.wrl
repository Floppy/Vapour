#VRML V2.0 utf8
#=============---
# Arup Simulation Visualisation System
#-------------
# Copyright 2002 Vapour Technology Ltd.
#
# SlabElement.wrl
# 19/03/2002 - James Smith
#
# $Id: SlabElement.wrl,v 1.4 2002/03/21 15:09:28 vap-james Exp $

PROTO SlabElement [
   eventIn MFColor set_colours
   eventIn MFVec3f set_nodes
   eventIn SFBool  set_visible
   field MFColor colours [ 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1, 1 1 1]
   field MFVec3f nodes   [ 0.5 0 0.5, 0 0 0.5, -0.5 0 0.5, -0.5 0 0, -0.5 0 -0.5, 0 0 -0.5, 0.5 0 -0.5, , 0.5 0 0, 0 0 0]
   field SFFloat thickness 1
]
{
   Group {
      children [
         DEF SLAB Shape {
            appearance Appearance {
               material DEF SLABMATERIAL Material {
                  #transparency 0.5
                  diffuseColor 0.5 0.5 0.5
               }
            }
            geometry IndexedFaceSet {
               coord DEF COORDS Coordinate {}
               color DEF COLOURS Color {}
               colorPerVertex TRUE
               solid FALSE
               coordIndex [
                  0 28 32 4 -1
                  4 32 12 8 -1
                  32 20 16 12 -1
                  28 24 20 32 -1
                  3 7 35 31 -1
                  7 11 15 35 -1
                  35 15 19 23 -1
                  31 35 23 27 -1
                  0 4 5 1 -1
                  2 6 7 3 -1
                  4 8 9 5 -1
                  6 10 11 7 -1
                  8 12 13 9 -1
                  10 14 15 11 -1
                  12 16 17 13 -1
                  14 18 19 15 -1
                  16 20 21 17 -1
                  18 22 23 19 -1
                  20 24 25 21 -1
                  22 26 27 23 -1
                  24 28 29 25 -1
                  26 30 31 27 -1
                  28 0 1 29 -1
                  30 2 3 31 -1
               ]
            }
         }
         DEF STEEL Shape {
            appearance Appearance {
               material DEF STEELMATERIAL Material {
                  shininess 1
                  diffuseColor 0.75 0.75 0.75
               }
            }
            geometry IndexedFaceSet {
               coord USE COORDS
               #color USE COLOURS
               #colorPerVertex TRUE
               solid TRUE
               coordIndex [
                  #1 29 33 5 -1
                  #5 33 13 9 -1
                  #33 21 17 13 -1
                  #29 25 21 33 -1
                  #2 6 34 30 -1
                  #6 10 14 34 -1
                  #34 14 18 22 -1
                  #30 34 22 26 -1
                  1 5 6 2 -1
                  5 9 10 6 -1
                  9 13 14 10 -1
                  13 17 18 14 -1
                  17 21 22 18 -1
                  21 25 26 22 -1
                  25 29 30 26 -1
                  29 1 2 30 -1
               ]
            }
         }
      ]
   }
   Script {
      directOutput TRUE
      mustEvaluate TRUE
      eventIn MFColor set_colours IS set_colours
      eventIn MFVec3f set_nodes IS set_nodes
      eventIn SFBool  set_visible IS set_visible
      field MFColor colours IS colours
      field SFFloat thickness IS thickness
      field MFVec3f nodes  IS nodes
      field MFVec3f points []
      field SFNode  coordNode USE COORDS
      field SFNode  colourNode USE COLOURS
      field SFNode  steelmaterial USE STEELMATERIAL
      field SFNode  slabmaterial USE SLABMATERIAL
      url "javascript:
         function initialize() {
            // Create points
            points[0]  = new SFVec3f(0,thickness,0);
            points[1]  = new SFVec3f(0,thickness/2 + thickness/20,0);
            points[2]  = new SFVec3f(0,thickness/2 - thickness/20,0);
            points[3]  = new SFVec3f(0,0,0);
            // Calculate initial node positions and colours
            update_nodes(nodes);
            update_colours(colours);
         }
         function set_colours(value,time) {
            update_colours(value);
         }
         function update_colours(colourset) {
            for (i=0; i<9; i++) {
               for (j=0; j<4; j++) {
                  colourNode.color[(i*4) + j] = colours[i];
               }
            }
         }
         function set_nodes(value,time) {
            update_nodes(value);
         }
         function update_nodes(nodeset) {
            for (i=0; i<9; i++) {
               for (j=0; j<4; j++) {
                  coordNode.point[(i*4) + j] = nodeset[i].add(points[j]);
               }
            }
         }
         function set_visible(value,time) {
            if (value == true) {
               steelmaterial.transparency = 0;
               slabmaterial.transparency = 0;
            }
            else {
               steelmaterial.transparency = 0.9;
               slabmaterial.transparency = 0.9;
            }
         }
      "
   }
}

SlabElement {}