#VRML V2.0 utf8

PROTO BeamElement [
   eventIn MFColor set_colours
   eventIn MFVec3f set_nodes
   field MFColor colours [ 0.5 0.5 0.5, 0.5 0.5 0.5]
   field SFFloat flange 0.1
   field SFFloat height 1
   field SFFloat web    0.2
   field SFFloat width  1
   field MFVec3f nodes   [ 0 0 0.5, 0 0 -0.5]
]
{
   Shape {
      appearance Appearance {
         material Material {
            diffuseColor 1 1 1
         }
      }
      geometry DEF BEAM IndexedFaceSet {
         coord DEF COORD Coordinate {}
         color DEF COLOR Color {}             
         colorPerVertex TRUE
         coordIndex [
            0 12 1 -1
            1 12 13 -1
            1 13 2 -1
            2 13 14 -1
            2 14 3 -1
            3 14 15 -1
            3 15 4 -1
            4 15 16 -1
            4 16 5 -1
            5 16 17 -1
            5 17 6 -1
            6 17 18 -1
            6 18 7 -1
            7 18 19 -1
            7 19 8 -1
            8 19 20 -1
            8 20 9 -1
            9 20 21 -1
            9 21 10 -1
            10 21 22 -1
            10 22 11 -1
            11 22 23 -1
            11 23 0 -1
            0 23 12 -1
            0 1 11 -1
            11 1 10 -1
            2 3 9 -1
            9 3 8 -1
            4 5 7 -1
            7 5 6 -1
            12 23 13 -1
            13 23 22 -1
            14 21 15 -1
            15 21 20 -1
            16 19 17 -1
            17 19 18 -1
         ]
      }
   }
   Script {
      directOutput TRUE
      mustEvaluate TRUE
      eventIn MFColor set_colours IS set_colours
      eventIn MFVec3f set_nodes IS set_nodes
      field MFColor colours IS colours
      field SFFloat flange IS flange
      field SFFloat height IS height
      field SFFloat web    IS web
      field SFFloat width  IS width
      field MFVec3f nodes  IS nodes
      field MFVec3f crossSection []
      field SFNode  beam USE BEAM
      url "javascript:
         function initialize() {
            // Work out horizontal and vertical coordinate values
            var fTopFlangeTop = 0;
            var fTopFlangeBottom = -flange;
            var fBottomFlangeBottom = -height;
            var fBottomFlangeTop = fBottomFlangeBottom+flange;
            var fSide = width/2;
            var fWeb = web/2;
            // Create crossSection
            crossSection[0]  = new SFVec3f(-fSide,fTopFlangeTop,0);
            crossSection[1]  = new SFVec3f(-fSide,fTopFlangeBottom,0);
            crossSection[2]  = new SFVec3f(-fWeb,fTopFlangeBottom,0);
            crossSection[3]  = new SFVec3f(-fWeb,fBottomFlangeTop,0);
            crossSection[4]  = new SFVec3f(-fSide,fBottomFlangeTop,0);
            crossSection[5]  = new SFVec3f(-fSide,fBottomFlangeBottom,0);
            crossSection[6]  = new SFVec3f(fSide,fBottomFlangeBottom,0);
            crossSection[7]  = new SFVec3f(fSide,fBottomFlangeTop,0);
            crossSection[8]  = new SFVec3f(fWeb,fBottomFlangeTop,0);
            crossSection[9]  = new SFVec3f(fWeb,fTopFlangeBottom,0);
            crossSection[10] = new SFVec3f(fSide,fTopFlangeBottom,0);
            crossSection[11] = new SFVec3f(fSide,fTopFlangeTop,0);
            // Calculate initial node positions and colours
            update_nodes(nodes);
            update_colours(colours);
         }
         function set_colours(value,time) {
            update_colours(value);
         }
         function update_colours(colourset) {
            for (i=0; i<12; i++) {
               beam.color.color[i] = colourset[0];
            }
            for (i=12; i<24; i++) {
               beam.color.color[i] = colourset[1];
            }            
         }
         function set_nodes(value,time) {
            update_nodes(value);
         }
         function update_nodes(nodeset) {
            for (i=0; i<12; i++) {
               beam.coord.point[i] = nodeset[0].add(crossSection[i]);
            }
            for (i=0; i<12; i++) {
               beam.coord.point[i+12] = nodeset[1].add(crossSection[i]);
            }
         }
      "
   }
}

BeamElement {}
